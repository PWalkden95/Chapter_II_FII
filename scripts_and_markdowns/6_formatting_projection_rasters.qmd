---
title: "6_preparing_rasters_for_projections"
author: "Patrick Alexander Walkden"
format: html
editor: visual
---

## Preparing rasters for projections

Now that we have the two models defined for both parts of the functional intactness index, to make things spatially explicit we need to get spatial estimates of all variables in the models. Then for each grid cell we can predict the model with the related pressures there and weight by the proportion of each grid which is of a particular land use.

So that's it in theory, but we need to deal with the duel baseline and define which regions of the world are to be compared to a non-forest baseline and which to compare to a forest baseline. To do this I use the biome maps of the world and partition into forest and non-forest biomes. Additionally, as a second pass I also use the land use classifcation maps and if a grid cell contains greater that 50% of primary or secondary forest/non-forest it is classified as such. This will produce two maps defining the forest and non-forest regions.

Following that we need to combine the luh2 rasters to align with the PREDICTS land use classifications. This is done as such:

Primary forest \< -------------- primf

Primary non-forest \< --------- primnf

Secondary vegetation \< --------- secdf +secdnf

Plantation forest \< ------------ c3per + c4per

Pasture \< ----------------- pastr

Cropland \< ------------- c3ann + c4ann + c3nfx

Urban \< ---------------- urban

All these land uses also have rasters for each of our land use intensity classifications, I will have to ask Adrianna how she did that..

We will also need to ensure that all rasters are in the same format, meaning that we may need to alter the resolution, extent and coordinate reference system of some rasters before they can be used together. For this markdown I will demonstrate the workflow at a 10km resolution, but the final projections will be at 1km resolution.

Finally, I am going to be projecting FII at the year 2000 and 2020 to assess how the functional intactness of bird communites has change in our recent history so will need to get the values for each of those years as well.

```{r}

##clear environment 
rm(list = ls())

require(terra) ## dealing with rasters
require(raster) ##ditto
require(tidyverse) ## data wrangling
require(sf) ## working with spatial data
require(sp) ## ditto
require(doParallel) ## for parallel computing
require(future.apply) ## ditto
```

## Formatting the rasters

Most of the pressure and land use rasters are currently at a 1km resolution, but the extent varies for some,we want as wide a possible projection so we are going to keep the extent -180 to 180 degree latitude but slice off Antarctica and have -60 to 90 degrees latitude. The coordinate reference system I will use is the standard ....

```{r}

## load in formatting and combination functions

source("../functions/raster_projection_functions.R")

## get the relevant raster file names

raster_files_2000 <-
  list.files(
    "../data/projection_rasters/2000-rasters-for-projections/unformatted_rasters/",
    full.names = FALSE
  )


## going to do this in a loop to make sure things are quick 

registerDoParallel(cores = detectCores() - 1)


foreach(raster = raster_files_2000,
        .packages = c("terra", "tidyverse")) %dopar% {
         
           format_raster(
            data_dir = "../data/projection_rasters/2000-rasters-for-projections/unformatted_rasters",
            raster_file = raster,
            outdir = "../data/projection_rasters/2000-rasters-for-projections/10km",
            target_resolution = 10,
            units = "km",
            target_extent = c(-180,180,-60,90),
            keep = FALSE
          )
        }
    
          
          
          ## get the relevant raster file names

raster_files_2020 <-
  list.files(
    "../data/projection_rasters/2020-rasters-for-projections/unformatted_rasters/",
    full.names = FALSE
  )


foreach(raster = raster_files_2020,
        .packages = c("terra", "tidyverse")) %dopar% {
         
           format_raster(
            data_dir = "../data/projection_rasters/2020-rasters-for-projections/unformatted_rasters",
            raster_file = raster,
            outdir = "../data/projection_rasters/2020-rasters-for-projections/10km",
            target_resolution = 10,
            units = "km",
            target_extent = c(-180,180,-60,90),
            keep = FALSE
          )
        }
        ## close all connections
          
          closeAllConnections()

```

## Combining luh2 rasters to PREDICTS classifications

Next step will be to combine and save the PREDICTS land_use class and intensity rasters

```{r}

## get the lists for 2000 and 2020

predicts_list_2000 <-
  luh2_to_predicts(
    data_dir = "../data/projection_rasters/2000-rasters-for-projections/10km",
    intensity = c(
      "primary forest",
      "primary non-forest",
      "secondary",
      "plantation",
      "pasture",
      "cropland",
      "urban"
    )
  )


predicts_list_2020 <-
  luh2_to_predicts(
    data_dir = "../data/projection_rasters/2020-rasters-for-projections/10km",
    intensity = c(
      "primary forest",
      "primary non-forest",
      "secondary",
      "plantation",
      "pasture",
      "cropland",
      "urban"
    )
  )


### then do this in parallel, maybe not necessary for the 10km rasters but the 1km resolution is slow so doing in parallel save alot of handling time.

plan(multicore(workers = detectCores() - 1))

future_lapply(seq_along(predicts_list_2020), function(x, y, i) {
  combine_to_predicts(
    predicts_list = x[[i]],
    predicts_lu = y[[i]],
    outdir = "../data/projection_rasters/2020-rasters-for-projections/10km",
    data_dir = "../data/projection_rasters/2020-rasters-for-projections/10km"
  )
}, y = names(predicts_list_2020), x = predicts_list_2020)


future_lapply(seq_along(predicts_list_2000), function(x, y, i) {
  combine_to_predicts(
    predicts_list = x[[i]],
    predicts_lu = y[[i]],
    outdir = "../data/projection_rasters/2000-rasters-for-projections/10km",
    data_dir = "../data/projection_rasters/2000-rasters-for-projections/10km"
  )
}, y = names(predicts_list_2000), x = predicts_list_2000)



closeAllConnections()
```

## Defining forest and non-forest biomes

now onto getting the forest and non-forest biomes defined for our two different baselines

```{r}

##load in a raster that has the world that we can reclassify to a blank map that we can then project the biome polygons onto

world_raster <- raster::raster("../data/projection_rasters/2020-rasters-for-projections/10km/10kmLU-c3ann-2020.tif")


world_raster <- raster::reclassify(world_raster, c(-Inf,Inf,0))


## load in wwf world biomes spatial data

World_biomes <- sf::read_sf("../../../Datasets/WWF_Terrestrial_Biomes/official/wwf_terr_ecos.shp")

### biomes are currently numbered so change that to the names of the biomes

World_biomes$BIOME <- factor(World_biomes$BIOME)

levels(World_biomes$BIOME) <- c("Tropical & Subtropical Moist Broadleaf Forests","Tropical & Subtropical Dry Broadleaf Forests",
                                "Tropical & Subtropical Coniferous Forests", "Temperate Broadleaf & Mixed Forests","Temperate Conifer Forests",
                                "Boreal Forests/Taiga","Tropical & Subtropical Grasslands, Savannas & Shrublands","Temperate Grasslands, Savannas & Shrublands",
                                "Flooded Grasslands & Savannas","Montane Grasslands & Shrublands","Tundra","Mediterranean Forests, Woodlands & Scrub",
                                "Deserts & Xeric Shrublands","Mangroves","Lakes","Rock & Ice")


forest_biomes <- levels(World_biomes$BIOME)[c(1:6,12,14)]


forest_data <- World_biomes %>% dplyr::filter(BIOME %in% forest_biomes)


### combine the forest polygons togethet and make sure that the crs's match between the polygons and raster, change class to one required by fasterize function

polygon <- st_as_sf(st_transform(st_combine(forest_data), crs = crs(world_raster)))

### project forest polygons onto a raster 

forest_biomes <- terra::rast(fasterize::fasterize(sf = polygon, raster = world_raster, fun = "count",background = NA))

#let's have a look 

plot(forest_biomes, col = "green")


###############
### Non-forest biomes
##############

non_forest_biomes <- levels(World_biomes$BIOME)[c(7:11,13,15:16)]

non_forest_data <- World_biomes %>% dplyr::filter(BIOME %in% non_forest_biomes)

polygon <- st_as_sf(st_transform(st_combine(non_forest_data), crs = crs(world_raster)))


non_forest_biomes <- terra::rast(fasterize::fasterize(sf = polygon, raster = world_raster, fun = "count",background = NA))



plot(non_forest_biomes, col = "blue")


## check whether each cell is one or the other and they are which is good. 
plot(sum(non_forest_biomes,forest_biomes, na.rm = TRUE), col = "orange")


######### Now I also wanted to ensure that we were capturing the forest/non-forest regions as well as possible so I then used the luh2 land use classifcation maps to validate the forest biome polygons.So if cells contain >50% of primary and secondary forest or non-forest they are classified as such.


##### forest cells -- load in the primary and secondary forest rasters

forest_pri <- terra::rast("../data/projection_rasters/2000-rasters-for-projections/10km/10kmLU-primf-2000.tif")
forest_sec <- terra::rast("../data/projection_rasters/2000-rasters-for-projections/10km/10kmLU-secdf-2000.tif")

## sum them together 

forest <- sum(forest_pri, forest_sec, na.rm = TRUE)

## which cells have greater than a 50% proportion

forest <- forest > 0.5

## sum the forest biomes and forest proportions

forest_biomes <- sum(forest_biomes, forest, na.rm = TRUE)

## just the cells that are occupied at least once

forest_biomes <- forest_biomes > 0

## now need to remove those cells from the non-forest biome raster

non_forest_overlap <- sum(non_forest_biomes, forest, na.rm = TRUE)

### so the cells that are occupied in both cases need to be dropped as they are reclassified as forest baseline cells. 

terra::values(non_forest_biomes)[which(terra::values(non_forest_overlap) == 2)] <- NA



#################################
## Non-forest cell proportion
#################################

non_forest_pri <-  terra::rast("../data/projection_rasters/2000-rasters-for-projections/10km/10kmLU-primn-2000.tif")
non_forest_sec <- terra::rast("../data/projection_rasters/2000-rasters-for-projections/10km/10kmLU-secdn-2000.tif")

non_forest <- sum(non_forest_pri, non_forest_sec, na.rm = TRUE)

non_forest <- non_forest > 0.5

non_forest_biomes <- sum(non_forest_biomes, non_forest, na.rm = TRUE)


non_forest_biomes <- non_forest_biomes > 0


forest_overlap <- sum(forest_biomes, non_forest, na.rm = TRUE)

terra::values(forest_biomes)[which(terra::values(forest_overlap) == 2)] <- NA


## make sure that each cell is only classified once again and they are so its all good

plot(sum(forest_biomes, non_forest_biomes, na.rm = TRUE))

## save both!

raster::writeRaster(
  forest_biomes,
  filename = "../data/projection_rasters/2020-rasters-for-projections/10km/10kmforest_biomes.tif",
  overwrite = TRUE,
  gdal = c("COMPRESS=NONE", "TFW=YES"),
  datatype = 'FLT8S'
)

raster::writeRaster(
  non_forest_biomes,
  filename = "../data/projection_rasters/2020-rasters-for-projections/10km/10kmnon_forest_biomes.tif",
  overwrite = TRUE,
  gdal = c("COMPRESS=NONE", "TFW=YES"),
  datatype = 'FLT8S'
)


```

Now finally when savinf each raster as a .tif file for some reason it also save an accompanying .tfw file which seem useless.

```{r}

### remove the files

file.remove(grep(list.files(path = "../data/projection_rasters/2000-rasters-for-projections/10km/",full.names = TRUE),pattern = ".tfw",value = TRUE))
file.remove(grep(list.files(path = "../data/projection_rasters/2020-rasters-for-projections/10km/",full.names = TRUE),pattern = ".tfw",value = TRUE))
```
